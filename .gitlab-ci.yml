variables:
  OMP_NUM_THREADS: "1"
# mpirun in docker has a problem with its default transfer mechanism,
# so we disable it:
  OMPI_MCA_btl_vader_single_copy_mechanism: "none"

image: registry.gitlab.tugraz.at/ibi/reproducibility/reproducibility_testing/ibi_cuda_all_deps


# Make Builds interruptible by default
default:
  interruptible: true

#### Now part of the docker image
####
before_script:
  - apt-get update -qq && apt-get install -y -qq
  - chown -R ibi .

stages:
  - build
  - test1
  - test2

Build:
  stage: build
  script:
    - sudo -E -u ibi make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes


Build_Clang:
  stage: build
  script:
    - apt-get install -y -qq clang-16 libomp-16-dev
    - sudo -E -u ibi CC=clang-16 make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes

Build_Clang_GPU:
  stage: build
  script:
    - apt-get install -y -qq clang-16 libomp-16-dev
    - sudo -E -u ibi CC=clang-16 CUDA_CC=clang-14 CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes



Build_Static:
  stage: build
  script:
    - apt-get update -qq && apt-get install -y libgfortran-12-dev
    - sudo -E -u ibi SLINK=1 make
  artifacts:
    paths:
      - bart
    expire_in: 45 minutes


Build_UBSan:
  stage: build
  script:
    - sudo -E -u ibi UBSAN=1 ASAN=1 make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes


Build_GPU:
  stage: build
  script:
    - sudo -E -u ibi CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes

Build_MPI_GPU:
  stage: build
  script:
    - sudo -E -u ibi MPI=1 CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes

Build_MPI:
  stage: build
  script:
    - sudo -E -u ibi MPI=1 make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes

Build_LTO:
  stage: build
  script:
    - sudo -E -u ibi CFLAGS="-flto -O2 -g" make
  artifacts:
    paths:
      - bart
      - ./lib/
    expire_in: 45 minutes


Build_Analyzer:
  stage: build
  script:
    - sudo -E -u ibi CFLAGS="-fanalyzer -Werror" make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes
  allow_failure: true



Build_Tensorflow:
  stage: build
  script:
# Already part of the Docker image
#    - wget --no-verbose https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.4.0.tar.gz
#    - mkdir tensorflow_dir && tar -C tensorflow_dir -xvzf libtensorflow-gpu-linux-x86_64-2.4.0.tar.gz
    - sudo -E -u ibi TENSORFLOW=1 TENSORFLOW_BASE=/tensorflow_dir/ CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make all
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes

Build_Debug_Dwarf:
  stage: build
  script:
    - apt-get update -qq && apt-get install -y libdw-dev libunwind-dev libbz2-dev liblzma-dev
    - sudo -E -u ibi DEBUG_DWARF=1 make
  artifacts:
    paths:
      - bart
      - ./lib/
      - ./commands/
    expire_in: 45 minutes


Unit_Test:
  stage: test1
  script:
    - sudo -E -u ibi AUTOCLEAN=0 make utest
  needs: [Build]
  dependencies:
     - Build


Unit_Test_Clang:
  stage: test1
  script:
    - apt-get install -y -qq clang-16 libomp-16-dev
    - sudo -E -u ibi AUTOCLEAN=0 CC=clang-16 make utest
  needs: [Build_Clang]
  dependencies:
     - Build_Clang

Unit_Test_Clang_GPU:
  stage: test1
  script:
    - if ! nvidia-smi ; then printf "No usable GPU found, skipping GPU tests!\n"; exit 0; fi
    - apt-get install -y -qq clang-16 libomp-16-dev
    - sudo -E -u ibi AUTOCLEAN=0 CC=clang-16 CUDA_CC=clang-14 CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make utest_gpu
  needs: [Build_Clang_GPU]
  dependencies:
    - Build_Clang_GPU



Unit_Test_Valgrind:
  stage: test1
  script:
    - sudo -E -u ibi AUTOCLEAN=0 UTESTLEAK=1 make utest
  needs: [Build]
  dependencies:
     - Build


Unit_Test_UBSan:
  stage: test1
  script:
    - sudo -E -u ibi AUTOCLEAN=0 UBSAN=1 ASAN=1 make utest
  needs: [Build_UBSan]
  dependencies:
     - Build_UBSan


Unit_Test_GPU:
  stage: test1
  script:
    - if ! nvidia-smi ; then printf "No usable GPU found, skipping GPU tests!\n"; exit 0; fi
    - sudo -E -u ibi AUTOCLEAN=0 CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make utest_gpu
  needs: [Build_GPU]
  dependencies:
    - Build_GPU

Unit_Test_MPI:
  stage: test1
  script:
    - sudo -E -u ibi AUTOCLEAN=0 MPI=1 make utest
  needs: [Build_MPI]
  dependencies:
     - Build_MPI


Unit_Test_Tensorflow:
  stage: test1
  script:
# Already part of the Docker image
#    - wget --no-verbose https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.4.0.tar.gz
#    - mkdir tensorflow_dir && tar -C tensorflow_dir -xvzf libtensorflow-gpu-linux-x86_64-2.4.0.tar.gz
    - sudo -E -u ibi TENSORFLOW=1 TENSORFLOW_BASE=/tensorflow_dir/ CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make utest
  needs: [Build_Tensorflow]
  dependencies:
    - Build_Tensorflow


Unit_Test_LTO:
  stage: test1
  script:
    - sudo -E -u ibi CFLAGS="-flto -O2 -g" make utest
  needs: [Build_LTO]
  dependencies:
    - Build_LTO



Integration_Test:
  stage: test2
  script:
    - sudo -E -u ibi AUTOCLEAN=0 AGUE_TWIX_REF=/reference_data/twix/ make test testslow testague
  needs: [Build]
  dependencies:
    - Build


Integration_Test_Python:
  stage: test2
  script:
    - sudo -E -u ibi AUTOCLEAN=0 make pythontest
  needs: [Build]
  dependencies:
    - Build
  allow_failure: true


Integration_Test_GPU:
  stage: test2
  script:
    - if ! nvidia-smi ; then printf "No usable GPU found, skipping GPU tests!\n"; exit 0; fi
    - sudo -E -u ibi AUTOCLEAN=0 CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make gputest
  needs: [Build_GPU]
  dependencies:
    - Build_GPU


Integration_Test_Clang:
  stage: test2
  script:
    - apt-get install -y -qq clang-16 libomp-16-dev
    - sudo -E -u ibi AUTOCLEAN=0 CC=clang-16 make test
  needs: [Build_Clang]
  dependencies:
    - Build_Clang


Integration_Test_Clang_GPU:
  stage: test2
  script:
    - if ! nvidia-smi ; then printf "No usable GPU found, skipping GPU tests!\n"; exit 0; fi
    - apt-get install -y -qq clang-16 libomp-16-dev
    - sudo -E -u ibi AUTOCLEAN=0 CC=clang-16 CUDA_CC=clang-14 CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" make gputest
  needs: [Build_Clang_GPU]
  dependencies:
    - Build_Clang_GPU


Integration_Test_UBSan:
  stage: test2
  script:
    - sudo -E -u ibi AUTOCLEAN=0 UBSAN=1 ASAN=1 DEBUG=1 UBSAN_OPTIONS=print_stacktrace=1 make test
  needs: [Build_UBSan]
  dependencies:
    - Build_UBSan


Integration_Test_MPI:
  stage: test2
  script:
    - sudo -E -u ibi AUTOCLEAN=0 MPI=1 make testslow
  needs: [Build_MPI]
  dependencies:
    - Build_MPI

Integration_Test_MPI_GPU:
  stage: test2
  script:
    - if ! nvidia-smi ; then printf "No usable GPU found, skipping GPU tests!\n"; exit 0; fi
    - sudo -E -u ibi AUTOCLEAN=0 CUDA=1 CUDA_LIB=lib64 GPUARCH_FLAGS="-arch sm_35 -Wno-deprecated-gpu-targets" MPI=1 make gputest
  needs: [Build_MPI_GPU]
  dependencies:
    - Build_MPI_GPU

#Integration_Test_LTO:
#  stage: test2
#  script:
#    - CFLAGS="-flto -O2 -g" make test
#  needs: [Build_LTO]
#  dependencies:
#    - Build_LTO

